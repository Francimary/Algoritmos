import random
import time
import copy


#Criacao da lista
lista_aleatoria = [random.randint(-0, 10000) for c in range(5000)]

def bubbleSort(listab):
    for bolhinha in range(len(listab)-1,0,-1):
        for i in range(bolhinha):
            if listab[i]>listab[i+1]:
                #No Python, nao precisa fazer com variavel temp
                #Pode ser feita atribuicao simultanea. Ex.: a, b = b, a
                #Mas fiz dessa forma para facilitar fazer o codigo
                #em outra linguagem, se for o caso.
                temp = listab[i]
                listab[i] = listab[i+1]
                listab[i+1] = temp

    

def insertionSort(lista1):
    for index in range(1,len(lista1)):
        valor_atual= lista1[index]
        posicao = index
        while posicao > 0 and lista1[posicao-1] > valor_atual:
            lista1[posicao] = lista1[posicao-1]
            posicao = posicao-1

        lista1[posicao] = valor_atual
    return lista1


    
def mergeSort(lista):
#    print("Divisao ",lista)
    if len(lista)>1:
        meio = len(lista)//2
        ladoesquerdo = lista[:meio]
        ladodireito = lista[meio:]
        
        mergeSort(ladoesquerdo)
        mergeSort(ladodireito)

        i=0
        j=0
        k=0
        while i < len(ladoesquerdo) and j < len(ladodireito):
            if ladoesquerdo[i] < ladodireito[j]:
                lista[k]=ladoesquerdo[i]
                i=i+1
            else:
                lista[k]=ladodireito[j]
                j=j+1
            k=k+1

        while i < len(ladoesquerdo):
            lista[k]=ladoesquerdo[i]
            i=i+1
            k=k+1

        while j < len(ladodireito):
            lista[k]=ladodireito[j]
            j=j+1
            k=k+1
#    print("Juntando ",lista)
    return lista


#print "Lista original:"
#print (lista_aleatoria)

# Queremos trabalhar na copia da lista e nao na lista original, por isso "copy"/"deepcopy"
lms = copy.deepcopy(lista_aleatoria) #lms - Lista ordenada por MergeSort (vai ser)
inicio3 = time.time()
mergeSort(lms)
fim3 = time.time()
tempoms = (fim3 - inicio3) #Tempo que demora para executar o IS
print "Tempo de ordenacao por MS: " + str(tempoms)

lis = copy.deepcopy(lista_aleatoria)  #lis - Lista ordenada por Insertionsort (vai ser)
inicio2 = time.time()
insertionSort(lis)
fim2 = time.time()
tempois = (fim2 - inicio2) #Tempo que demora para executar o IS
print "Tempo de ordenacao por IS: " + str(tempois)

lbs = copy.deepcopy(lista_aleatoria)   #lbs - Lista ordenada por Bubblesort (vai ser)
inicio = time.time()
bubbleSort(lbs)
fim = time.time()
tempobs = (fim - inicio) #Tempo que demora para executar o BS
print "Tempo de ordenacao por BS: " + str(tempobs)

